(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{438:function(s,t,a){s.exports=a.p+"assets/img/image-20240911110200565.33862d87.png"},666:function(s,t,a){s.exports=a.p+"assets/img/image-20240911093315955.369a8bcf.png"},667:function(s,t,a){s.exports=a.p+"assets/img/image-20240911093700425.bb3c4337.png"},668:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094003092.6d98e337.png"},669:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094123056.d383f567.png"},670:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094223439.a3b2ec6e.png"},671:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094357455.e8b0ed86.png"},672:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094441385.662b2fad.png"},673:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094614198.ba9ff2c2.png"},674:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094737159.98cc7679.png"},675:function(s,t,a){s.exports=a.p+"assets/img/image-20240911094916595.ffaca1e2.png"},676:function(s,t,a){s.exports=a.p+"assets/img/image-20240911095048986.72856da4.png"},677:function(s,t,a){s.exports=a.p+"assets/img/image-20240911095128616.637c6e4a.png"},678:function(s,t,a){s.exports=a.p+"assets/img/image-20240911095210660.a4e532f7.png"},679:function(s,t,a){s.exports=a.p+"assets/img/image-20240911095243843.800a382e.png"},680:function(s,t,a){s.exports=a.p+"assets/img/image-20240911104220451.fe79b16b.png"},681:function(s,t,a){s.exports=a.p+"assets/img/image-20240911104514910.89685a58.png"},682:function(s,t,a){s.exports=a.p+"assets/img/image-20240911104617786.b231c4e8.png"},683:function(s,t,a){s.exports=a.p+"assets/img/image-20240911105006674.5e0d1bba.png"},684:function(s,t,a){s.exports=a.p+"assets/img/image-20240911105432217.c8538f48.png"},685:function(s,t,a){s.exports=a.p+"assets/img/image-20240911112917928.2c20623a.png"},686:function(s,t,a){s.exports=a.p+"assets/img/image-20240911113048999.088036fc.png"},687:function(s,t,a){s.exports=a.p+"assets/img/image-20240911113726812.ebe6ff21.png"},688:function(s,t,a){s.exports=a.p+"assets/img/image-20240911133702272.d23afc77.png"},689:function(s,t,a){s.exports=a.p+"assets/img/image-20240911134444541.37e5dec8.png"},690:function(s,t,a){s.exports=a.p+"assets/img/image-20240911134645284.9496bc25.png"},940:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("blockquote",[t("p",[s._v("1、预处理：首先，对新旧虚拟 DOM 树进行预处理，包括：标记所有静态节点、标记所有拥有 key的节点。")]),s._v(" "),t("p",[s._v("2、根节点比较：比较新旧虚拟 DOM 树的根节点，如果相同则跳过，否则进行深度比较。")]),s._v(" "),t("p",[s._v("3、深度比较：深度比较的流程如下: ①比较两个节点的类型，如果不同则直接生成更新操作。②如果两个节点的类型相同，则比较两个节点的属性，如果不同则生成更新操作。③如果两个节点的类型和属性都相同，则比较两个节点的子节点。")]),s._v(" "),t("p",[s._v("4.生成更新操作 根据两个节点之间的差异，生成更新真实 DOM 所需的最小操作集。")])]),s._v(" "),t("p",[s._v("​\t快速 Diff 算法：正如其名，该算法的实测速度非常快。该算法最早应用于 ivi 和 inferno 这两个框架，Vue.js 3 借鉴并扩展了它。下图比较了 ivi、inferno 以及 Vue.js 2 的性能：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(666),alt:"性能比较"}})]),s._v(" "),t("blockquote",[t("p",[s._v("从中可以看出，在 DOM 操作的各个方面，ivi 和 inferno 所采用的快速 Diff 算法的性能都要稍优于 Vue.js 2 所采用的双端 Diff 算法。既然快速 Diff 算法如此高效，我们有必要了解它的思路。")])]),s._v(" "),t("h2",{attrs:{id:"相同的前置元素和后置元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相同的前置元素和后置元素"}},[s._v("#")]),s._v(" 相同的前置元素和后置元素")]),s._v(" "),t("blockquote",[t("p",[s._v("截取可复用的部分，不可复用的部分再进行 Diff。")])]),s._v(" "),t("p",[s._v("​\t不同于简单 Diff 算法和双端 Diff 算法，快速 Diff 算法包含"),t("strong",[s._v("预处理")]),s._v("步骤，这其实是"),t("strong",[s._v("借鉴了纯文本 Diff 算法的思路")]),s._v("。在纯文本 Diff 算法中，存在对两段文本进行预处理的过程。例如，在对两段文本进行 Diff 之前，可以先对它们进行全等比较：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" text2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("​\t这也称为"),t("strong",[s._v("快捷路径")]),s._v("。如果两段文本"),t("strong",[s._v("全等")]),s._v("，那么就无须进入核心 Diff 算法的步骤了。除此之外，预处理过程还会处理两段文本相同的"),t("strong",[s._v("前缀和后缀")]),s._v("。假设有如下两段文本：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" use vue "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" app development\n "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" use react "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" app development\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("​\t通过肉眼可以很容易发现，这两段文本的头部和尾部分别有一段相同的内容：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(667),alt:"文本预处理"}})]),s._v(" "),t("p",[s._v("​\t"),t("strong",[s._v("对于内容相同的问题，是不需要进行核心 Diff 操作的")]),s._v("。因此，对于 TEXT1 和 TEXT2 来说，真正需要进行 Diff 操作的部分是：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" vue\n "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" react\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("​\t这实际上是简化问题的一种方式。这么做的好处是，在特定情况下我们能够轻松地判断文本的插入和删除，例如：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" like you\n "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" like you too\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("​\t经过预处理，去掉这两段文本中相同的前缀内容和后缀内容之后，它将变成：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" too\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("​\t可以看到，经过预处理后，TEXT1 的内容为空。这说明 TEXT2 在 TEXT1 的基础上增加了字符串 too。相反，我们还可以将这两段文本的位置互换：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" like you too\n "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" like you\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("​\t这两段文本经过预处理后将变成：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" too\n "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEXT2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("​\t由此可知，TEXT2 是在 TEXT1 的基础上删除了字符串 too。")]),s._v(" "),t("p",[s._v("​\t快速 Diff 算法借鉴了纯文本 Diff 算法中预处理的步骤。例如：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(668),alt:"新旧两组子节点"}})]),s._v(" "),t("blockquote",[t("p",[s._v("这两组子节点的顺序如下：")]),s._v(" "),t("ul",[t("li",[s._v("旧的一组子节点：p-1、p-2、p-3。")]),s._v(" "),t("li",[s._v("新的一组子节点：p-1、p-4、p-2、p-3。")])])]),s._v(" "),t("p",[s._v("​\t通过观察可以发现，两组子节点具有"),t("strong",[s._v("相同的前置节点")]),s._v(" p-1，以及相同的后置节点 p-2 和 p-3：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(669),alt:"相同的前置节点和后置节点"}})]),s._v(" "),t("p",[s._v("​\t对于"),t("strong",[s._v("相同")]),s._v("的前置节点和后置节点，由于它们在新旧两组子节点中的"),t("strong",[s._v("相对位置不变")]),s._v("，所以我们"),t("strong",[s._v("无须移动")]),s._v("它们，但仍然需要在它们之间"),t("strong",[s._v("打补丁")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"前置节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前置节点"}},[s._v("#")]),s._v(" 前置节点")]),s._v(" "),t("p",[s._v("​\t对于前置节点，我们可以建立索引 j，其初始值为 0，用来指向两组子节点的开头：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(670),alt:"建立索引j，指向两组子节点的开头"}})]),s._v(" "),t("p",[s._v("​\t然后开启一个 while 循环，让索引 j 递增，直到遇到不相同的节点为止：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patchKeyedChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理相同的前置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 索引 j 指向新旧两组子节点的开头")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// while 循环向后遍历，直到遇到拥有不同 key 值的节点为止")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 patch 函数进行更新")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新索引 j，让其递增")]),s._v("\n     j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n     oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 就是从左往右遍历打补丁，直到遇到 key 不相等的 VNode 即停下来。")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("blockquote",[t("p",[s._v("我们使用 while 循环查找"),t("strong",[s._v("所有相同的前置节点")]),s._v("，并调用 patch 函数进行"),t("strong",[s._v("打补丁")]),s._v("，"),t("strong",[s._v("直到遇到 key 值不同")]),s._v("的节点为止。这样，我们就完成了对前置节点的更新。")])]),s._v(" "),t("p",[s._v("​\t在这一步更新操作过后，新旧两组子节点的状态如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(671),alt:"处理完前置节点后的状态"}})]),s._v(" "),t("blockquote",[t("p",[s._v("注意，当 while 循环终止时，索引 j 的值为 1。")])]),s._v(" "),t("h3",{attrs:{id:"后置节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后置节点"}},[s._v("#")]),s._v(" 后置节点")]),s._v(" "),t("p",[s._v("​\t接下来，我们需要处理相同的后置节点。由于"),t("strong",[s._v("新旧两组子节点的数量可能不同")]),s._v("，所以我们需要"),t("strong",[s._v("两个索引")]),s._v(" newEnd 和 oldEnd，分别指向新旧两组子节点中的"),t("strong",[s._v("最后一个")]),s._v("节点：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(672),alt:"建立索引，指向两组子节点的最后一个节点"}})]),s._v(" "),t("p",[s._v("​\t然后，再开启一个 while 循环，并"),t("strong",[s._v("从后向前遍历")]),s._v("这两组子节点，"),t("strong",[s._v("直到遇到 key 值不同")]),s._v("的节点为止：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patchKeyedChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的前置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n     oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的后置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 索引 oldEnd 指向旧的一组子节点的最后一个节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 索引 newEnd 指向新的一组子节点的最后一个节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n   oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// while 循环从后向前遍历，直到遇到拥有不同 key 值的节点为止")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 patch 函数进行更新")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 递减 oldEnd 和 nextEnd")]),s._v("\n     oldEnd"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n     newEnd"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n     oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("blockquote",[t("p",[s._v("与处理相同的前置节点一样，在 while 循环内，需要调用 patch 函数进行"),t("strong",[s._v("打补丁")]),s._v("，然后递减两个索引 oldEnd、newEnd 的值。")]),s._v(" "),t("ol",[t("li",[s._v("从左往右遍历，找到新旧节点 key 不同时即跳出循环，此时 j 指针就是新旧 VNode 不一致的位置索引。")]),s._v(" "),t("li",[s._v("开启另一个循环，从右向左遍历，此时新旧节点集合因为数量可能不一样多，所以需要分别定一个结束索引（即节点集合的长度 -1），然后从右往左遍历。")]),s._v(" "),t("li",[s._v("如果遇到相同 key 的节点则 path 对比内容是否需要更新，然后尾指针各自递减，继续下个循环。")]),s._v(" "),t("li",[s._v("往前找到新旧虚拟节点不同的，则退出循环，此时的新旧节点集合的尾指针指向的就是 key 不同的虚拟节点。")])])]),s._v(" "),t("p",[s._v("​\t在这一步更新操作过后，新旧两组子节点的状态如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(673),alt:"处理完后置节点后的状态"}})]),s._v(" "),t("p",[s._v("​\t当相同的前置节点和后置节点被处理完毕后，旧的一组子节点已经全部被处理了，而在新的一组子节点中，还遗留了一个未被处理的节点 p-4。")]),s._v(" "),t("h3",{attrs:{id:"新增节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新增节点"}},[s._v("#")]),s._v(" 新增节点")]),s._v(" "),t("p",[s._v("​\t其实不难发现，节点 p-4 是一个新增节点。那么，如何用程序得出“节点 p-4 是新增节点”这个结论呢？这需要我们观察三个索引 j、newEnd 和 oldEnd 之间的关系。")]),s._v(" "),t("ul",[t("li",[s._v("条件一 oldEnd < j 成立：说明在预处理过程中，所有旧子节点都处理完毕了。")]),s._v(" "),t("li",[s._v("条件二 newEnd >= j 成立：说明在预处理过后，在新的一组子节点中，仍然有未被处理的节点，而这些遗留的节点将被视作"),t("strong",[s._v("新增节点")]),s._v("。")])]),s._v(" "),t("p",[s._v("​\t如果条件一和条件二同时成立，说明在新的一组子节点中，存在遗留节点，且这些节点都是新增节点。因此我们需要将它们挂载到正确的位置：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(674),alt:"新增节点的情况"}})]),s._v(" "),t("p",[s._v("​\t在新的一组子节点中，索引值处于 j 和 newEnd 之间的任何节点都需要作为新的子节点进行挂载。为了将这些节点挂载到正确位置，我们必须找到正确的锚点元素。")]),s._v(" "),t("p",[s._v("​\t观察上图中新的一组子节点可知，新增节点应该挂载到节点 p-2 所对应的真实 DOM 前面。所以，节点 p-2 对应的真实 DOM 节点就是挂载操作的锚点元素：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patchKeyedChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的前置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的后置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 预处理完毕后，如果满足如下条件，则说明从 j --\x3e newEnd 之间的节点应作为新节点插入")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 锚点的索引")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" anchorIndex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 锚点元素")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" anchor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" anchorIndex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("anchorIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("el "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 采用 while 循环，调用 patch 函数逐个挂载新增节点")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" anchor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("​\t首先计算锚点的索引值（即 anchorIndex）为 newEnd + 1。如果小于新的一组子节点的数量，则说明锚点元素在新的一组子节点中，所以直接使用newChildren[anchorIndex].el 作为锚点元素；否则说明索引 newEnd 对应的节点已经是尾部节点了，这时无须提供锚点元素。有了"),t("strong",[s._v("锚点")]),s._v("元素之后，我们开启了一个 while循环，用来遍历索引 j 和索引 newEnd 之间的节点，并调用 patch 函数"),t("strong",[s._v("挂载")]),s._v("它们。")]),s._v(" "),t("blockquote",[t("p",[s._v("由于插入都是用的 inserBefore，而且后面节点的顺序都确定了，所以可以参照当前节点的下个节点的 el 进行插入。")]),s._v(" "),t("p",[s._v("newEnd 是新元素数组中，从尾开始往前比对，直到不匹配，这里需要注意不要将其跟 j 搞混了。")])]),s._v(" "),t("h3",{attrs:{id:"删除节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[s._v("#")]),s._v(" 删除节点")]),s._v(" "),t("p",[s._v("​\t上面的案例展示了新增节点的情况，我们再来看看删除节点的情况：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(675),alt:"删除节点的情况"}})]),s._v(" "),t("blockquote",[t("p",[s._v("在这个例子中，新旧两组子节点的顺序如下。")]),s._v(" "),t("ul",[t("li",[s._v("旧的一组子节点：p-1、p-2、p-3。")]),s._v(" "),t("li",[s._v("新的一组子节点：p-1、p-3。")])]),s._v(" "),t("p",[s._v("我们同样使用索引 j、oldEnd 和 newEnd 进行标记：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(676),alt:"在删除节点的情况下，各个索引的关系"}})]),s._v(" "),t("p",[s._v("​\t接着，对相同的前置节点进行预处理，处理后的状态如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(677),alt:"处理完前置节点后，各个索引的关系"}})]),s._v(" "),t("p",[s._v("​\t然后，对相同的后置节点进行预处理，处理后的状态如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(678),alt:"处理完后置节点后，各个索引的关系"}})])]),s._v(" "),t("p",[s._v("​\t当相同的前置节点和后置节点全部被处理完毕后，新的一组子节点已经全部被处理完毕了，而旧的一组子节点中遗留了一个节点 p-2。这说明，应该卸载节点 p-2。实际上，"),t("strong",[s._v("遗留的节点可能有多个")]),s._v("：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(679),alt:"遗留的节点可能有多个"}})]),s._v(" "),t("p",[s._v("​\t索引 j 和索引 oldEnd 之间的任何节点都应该被卸载，具体实现如下：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patchKeyedChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的前置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的后置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// j -> oldEnd 之间的节点应该被卸载")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unmount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("blockquote",[t("p",[s._v("新增了一个 else...if 分支。当满足条件 "),t("strong",[s._v("j > newEnd && j <=oldEnd")]),s._v(" 时，则开启一个 while 循环，并调用 unmount 函数"),t("strong",[s._v("逐个卸载")]),s._v("这些遗留节点。")])]),s._v(" "),t("h2",{attrs:{id:"判断是否需要进行-dom-移动操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断是否需要进行-dom-移动操作"}},[s._v("#")]),s._v(" 判断是否需要进行 DOM 移动操作")]),s._v(" "),t("blockquote",[t("p",[s._v("预处理的本质是找到相同的前置节点和后置节点理想情况下，预处理之后只需要增加或删除节点即可。非理想情况下就是还要处理节点的移动。")])]),s._v(" "),t("p",[s._v("​\t快速 Diff 算法的"),t("strong",[s._v("预处理")]),s._v("过程，即"),t("strong",[s._v("处理相同的前置节点和后置节点")]),s._v("。但是，前面给出的例子比较理想化，当处理完相同的前置节点或后置节点后，新旧两组子节点中总会有一组子节点全部被处理完毕。在这种情况下，只需要简单地挂载、卸载节点即可。但有时情况会比较复杂：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(680),alt:"复杂情况下的新旧两组子节点"}})]),s._v(" "),t("blockquote",[t("p",[s._v("在这个例子中，新旧两组子节点的顺序如下：")]),s._v(" "),t("ul",[t("li",[s._v("旧的一组子节点：p-1、p-2、p-3、p-4、p-6、p-5。")]),s._v(" "),t("li",[s._v("新的一组子节点：p-1、p-3、p-4、p-2、p-7、p-5。")])]),s._v(" "),t("p",[s._v("​\t可以看到，与旧的一组子节点相比，新的一组子节点多出了一个新节点 p-7，少了一个节点 p-6。这个例子并不像前面的例子那样理想化，我们无法简单地通过预处理过程完成更新。在这个例子中，相同的前置节点只有 p-1，而相同的后置节点只有 p-5：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(681),alt:"复杂情况下仅有少量相同的前置节点和后置节点"}})])]),s._v(" "),t("p",[s._v("​\t经过预处理后两组子节点的状态如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(682),alt:"处理完前置节点和后置节点后的状态"}})]),s._v(" "),t("blockquote",[t("p",[s._v("可以看到，经过预处理后，无论是新的一组子节点，还是旧的一组子节点，都有部分节点未经处理。这时就需要我们进一步处理。")]),s._v(" "),t("p",[s._v("​\t怎么处理呢？其实无论是简单 Diff 算法，还是双端 Diff 算法，抑或快速 Diff 算法，它们都遵循同样的处理规则：")]),s._v(" "),t("ul",[t("li",[s._v("判断是否有节点需要移动，以及应该如何移动；")]),s._v(" "),t("li",[s._v("找出那些需要被添加或移除的节点。")])])]),s._v(" "),t("p",[s._v("​\t所以接下来我们的任务就是，判断哪些节点需要移动，以及应该如何移动。观察上图可知，在这种非理想的情况下，当相同的前置节点和后置节点被处理完毕后，索引 j、newEnd 和 oldEnd 不满足下面两个条件中的任何一个：")]),s._v(" "),t("ul",[t("li",[s._v("j > oldEnd && j <= newEnd")]),s._v(" "),t("li",[s._v("j > newEnd && j <= oldEnd")])]),s._v(" "),t("p",[s._v("​\t因此，我们需要增加新的 else 分支来处理上图所示的情况：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patchKeyedChildren")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldChildren "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的前置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更新相同的后置节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 增加 else 分支来处理非理想情况")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("blockquote",[t("p",[s._v("后续的处理逻辑将会编写在这个 else 分支内。")])]),s._v(" "),t("p",[s._v("​\t知道了在哪里编写处理代码，接下来我们学习具体的处理思路。")]),s._v(" "),t("p",[s._v("​\t首先，我们需要构造一个数组 source，它的长度等于"),t("strong",[s._v("新的一组子节点在经过预处理之后剩余未处理节点的数量")]),s._v("，并且 "),t("strong",[s._v("source 中每个元素的初始值都是 -1")]),s._v("：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(683),alt:"构造source数组"}})]),s._v(" "),t("p",[s._v("​\t我们可以通过下面的代码完成 source 数组的构造：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构造 source 数组")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新的一组子节点中剩余未处理节点的数量")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" source "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Array")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fill")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("blockquote",[t("p",[s._v("首先，我们需要计算新的一组子节点中剩余未处理节点的数量，即 newEnd - j + 1，然后创建一个长度与之相同的数组 source，最后使用 fill 函数完成数组的填充。")]),s._v(" "),t("p",[s._v("数组 source 的作用：观察上图可以发现，"),t("strong",[s._v("数组 source 中的每一个元素分别与新的一组子节点中剩余未处理节点对应")]),s._v("。")])]),s._v(" "),t("p",[s._v("​\t实际上，"),t("strong",[s._v("source 数组将用来存储新的一组子节点中的节点在旧的一组子节点中的位置索引")]),s._v("，后面将会使用它计算出一个最长递增子序列，并用于辅助完成 DOM 移动的操作：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(684),alt:"填充source数组"}})]),s._v(" "),t("blockquote",[t("p",[s._v("上图 展示了填充 source 数组的过程。由于 source 数组存储的是新子节点在旧的一组子节点中的位置索引，所以有：")]),s._v(" "),t("ul",[t("li",[s._v("新的一组子节点中的节点 p-3 在旧的一组子节点中的索引为 2，因此 source 数组的第一个元素值为 2；")]),s._v(" "),t("li",[s._v("新的一组子节点中的节点 p-4 在旧的一组子节点中的索引为 3，因此 source 数组的第二个元素值为 3；")]),s._v(" "),t("li",[s._v("新的一组子节点中的节点 p-2 在旧的一组子节点中的索引为 1，因此 source 数组的第三个元素值为 1；")]),s._v(" "),t("li",[s._v("新的一组子节点中的节点 p-7 比较特殊，因为在旧的一组子节点中"),t("strong",[s._v("没有")]),s._v("与其 key 值相等的节点，所以 source 数组的第四个元素值"),t("strong",[s._v("保留原来的 -1")]),s._v("。")])]),s._v(" "),t("p",[s._v("核心思路就是尽可能找到能复用的节点进行 patch 操作。")]),s._v(" "),t("p",[s._v("source 存储的是中间部分"),t("strong",[s._v("新虚拟节点在旧虚拟节点集合中对应的索引")]),s._v("，如果没有找到则保留初始值 -1，-1的就是最终需要新增的。")])]),s._v(" "),t("p",[s._v("​\t我们可以通过两层 for 循环来完成 source 数组的填充工作，外层循环用于遍历旧的一组子节点，内层循环用于遍历新的一组子节点：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" source "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Array")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fill")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// oldStart 和 newStart 分别为起始索引，即 j")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历旧的一组子节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历新的一组子节点")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" k"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到拥有相同 key 值的可复用节点")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 patch 进行更新")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 最后填充 source 数组")]),s._v("\n         source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("blockquote",[t("p",[s._v("注意，由于"),t("strong",[s._v("数组 source 的索引是从 0 开始的")]),s._v("，而"),t("strong",[s._v("未处理节点的索引未必从 0 开始")]),s._v("，所以在填充数组时需要使用表达式 k - newStart 的值作为数组的索引值。外层循环的变量 i 就是当前节点在旧的一组子节点中的位置索引，因此直接将变量 i 的值赋给 source[k - newStart] 即可。")]),s._v(" "),t("p",[t("strong",[s._v("未处理节点即为 newStart")]),s._v("，不一定是 0，所以不能直接用 k，需要 k-newStart 获取当前在未处理新节点数组中实际的 index。")])]),s._v(" "),t("p",[s._v("​\t现在，source 数组已经填充完毕，我们后面会用到它。不过在进一步学习之前，我们需要回头思考一下上面那段用于填充 source 数组的代码存在怎样的问题。这段代码中我们采用了两层嵌套的循环，其时间复杂度为 O(n1 * n2)，其中 n1 和 n2 为新旧两组子节点的数量，我们也可以使用 O(n^2) 来表示。")]),s._v(" "),t("p",[s._v("​\t当新旧两组子节点的数量较多时，两层嵌套的循环会带来性能问题。出于优化的目的，我们可以"),t("strong",[s._v("为新的一组子节点构建一张索引表")]),s._v("，用来存储节点的 "),t("strong",[s._v("key")]),s._v(" 和节点位置"),t("strong",[s._v("索引")]),s._v("之间的映射：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(438),alt:"使用索引表填充source数组"}})]),s._v(" "),t("p",[s._v("​\t有了索引表，我们就可以利用它快速地填充 source 数组：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" source "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Array")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fill")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// oldStart 和 newStart 分别为起始索引，即 j")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构建索引表")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" keyIndex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     keyIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历旧的一组子节点中剩余未处理的节点")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通过索引表快速找到新的一组子节点中具有相同 key 值的节点位置")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" keyIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'undefined'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 patch 函数完成更新")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 填充 source 数组")]),s._v("\n       source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没找到")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unmount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("blockquote",[t("p",[s._v("同样使用了两个 for 循环，不过它们不再是嵌套的关系，所以能够将代码的时间复杂度降至 O(n)。")]),s._v(" "),t("p",[s._v("其中，第一个 for 循环用来"),t("strong",[s._v("构建索引表")]),s._v("，索引表存储的是节点的 key 值与节点在新的一组子节点中位置索引之间的映射，第二个 for 循环用来"),t("strong",[s._v("遍历旧的一组子节点")]),s._v("。")]),s._v(" "),t("p",[s._v("可以看到，我们拿旧子节点的 key 值去索引表 keyIndex 中查找该节点在新的一组子节点中的位置，并将查找结果存储到变量 k 中。")]),s._v(" "),t("p",[s._v("如果 k 存在，说明该节点是可复用的，所以我们调用 patch 函数进行打补丁，并填充 source 数组；否则说明该节点已经不存在于新的一组子节点中了，这时我们需要调用 unmount函数卸载它。")])]),s._v(" "),t("p",[s._v("​\t上述流程执行完毕后，source 数组已经填充完毕了。")]),s._v(" "),t("p",[s._v("​\t接下来我们应该思考的是，如何判断节点是否需要移动。实际上，快速 Diff 算法判断节点是否需要移动的方法与简单 Diff 算法类似：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构造 source 数组")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新的一组子节点中剩余未处理节点的数量")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" source "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Array")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fill")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新增两个变量，moved 和 pos")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" moved "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" keyIndex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     keyIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" keyIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'undefined'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n       source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断节点是否需要移动")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" pos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         moved "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unmount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br")])]),t("blockquote",[t("p",[s._v("新增了两个变量 moved 和 pos。前者的初始值为 false，代表是否需要移动节点，后者的初始值为 0，代表遍历旧的一组子节点的过程中遇到的最大索引值 k。")]),s._v(" "),t("p",[s._v("我们在学习简单 Diff 算法时曾提到，如果在遍历过程中遇到的"),t("strong",[s._v("索引值呈现递增趋势")]),s._v("，则说明不需要移动节点，反之则需要。所以在第二个 for 循环内，我们通过比较变量 k 与变量 pos 的值来判断是否需要移动节点。")]),s._v(" "),t("p",[s._v("**解析：**pos 相当于普通 Diff 算法中的 lastIndex，即 oldChildren 按序遍历，正常来说索引序列应该是递增的，如果出现某个节点在 newChildren 中的索引打破了这个递增序列，说明该节点在 newChildren 中应该被移动了。")])]),s._v(" "),t("p",[s._v("​\t除此之外，我们还需要一个数量标识，代表"),t("strong",[s._v("已经更新过的节点数量")]),s._v("。我们知道，"),t("strong",[s._v("已经更新过的节点数量应该小于新的一组子节点中需要更新的节点数量")]),s._v("。一旦前者超过后者，则说明有多余的节点，我们应该将它们卸载：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构造 source 数组")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" source "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Array")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fill")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newStart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" moved "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" keyIndex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     keyIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新增 patched 变量，代表更新过的节点数量")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" patched "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     oldVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果更新过的节点数量小于等于需要更新的节点数量，则执行更新")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("patched "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" keyIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'undefined'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每更新一个节点，都将 patched 变量 +1")]),s._v("\n         patched"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n         source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" newStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" pos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           moved "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没找到")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unmount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果更新过的节点数量大于需要更新的节点数量，则卸载多余的节点")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unmount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br")])]),t("blockquote",[t("p",[s._v("增加了 patched 变量，其初始值为 0，代表更新过的节点数量。")]),s._v(" "),t("p",[s._v("接着，在第二个 for 循环中增加了判断 patched <= count，如果此条件成立，则正常执行更新，并且每次更新后都让变量 patched 自增；否则说明剩余的节点都是多余的，于是调用 unmount 函数将它们卸载。")])]),s._v(" "),t("p",[s._v("​\t现在，我们通过判断变量 moved 的值，已经能够知道是否需要移动节点，同时也处理了很多边界条件。")]),s._v(" "),t("h2",{attrs:{id:"如何移动元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何移动元素"}},[s._v("#")]),s._v(" 如何移动元素")]),s._v(" "),t("p",[s._v("​\t前面，我们实现了两个目标：")]),s._v(" "),t("ul",[t("li",[s._v("判断是否需要进行 DOM 移动操作。我们"),t("strong",[s._v("创建了变量 moved 作为标识")]),s._v("（是否需要移动），当它的值为true 时，说明需要进行 DOM 移动操作。")]),s._v(" "),t("li",[t("strong",[s._v("构建 source 数组")]),s._v("。该数组的长度等于新的一组子节点去掉相同的前置/后置节点后，剩余未处理节点的数量。source 数组中"),t("strong",[s._v("存储着新的一组子节点中的节点在旧的一组子节点中的位置")]),s._v("，后面我们会根据 source 数组计算出一个最长递增子序列，用于 DOM  移动操作。")])]),s._v(" "),t("p",[s._v("​\t接下来，我们学习如何进行 DOM 移动操作：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" oldEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" newEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" newEnd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" oldStart"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" oldEnd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("moved"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 moved 为真，则需要进行 DOM 移动操作")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("blockquote",[t("p",[s._v("在 for 循环后增加了一个 if 判断分支。如果变量 moved 的值为 true，则说明需要进行 DOM 移动操作，所以用于 DOM 移动操作的逻辑将编写在该 if 语句块内。")])]),s._v(" "),t("p",[s._v("​\t为了进行 DOM 移动操作，我们首先要根据 source 数组计算出它的最长递增子序列。source 数组仍然取用在前面例子：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(438),alt:"用于计算source数组的递增子序列的例子"}})]),s._v(" "),t("blockquote",[t("p",[s._v("在这个例子中，我们计算出 source 数组为 [2, 3, 1, -1]。")])]),s._v(" "),t("p",[s._v("​\t那么，该数组的最长递增子序列是什么呢？这就需要我们了解最长递增子序列的概念。")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"},[s._v("什么是一个序列的递增子序列")]),t("p",[s._v("​\t简单来说，"),t("strong",[s._v("给定一个数值序列，找到它的一个子序列，并且该子序列中的值是递增的，子序列中的元素在原序列中不一定连续。"),t("strong",[s._v("一个序列可能有很多个递增子序列，其中最长的那一个就称为")]),s._v("最长递增子序列")]),s._v("。")]),s._v(" "),t("p",[s._v("举个例子，假设给定数值序列 [ 0, 8, 4, 12 ]，那么它的最长递增子序列就是 [0, 8, 12]。")]),s._v(" "),t("p",[s._v("当然，"),t("strong",[s._v("对于同一个数值序列来说，它的最长递增子序列可能有多个")]),s._v("，例如 [0, 4, 12] 也是本例的答案之一。")])]),t("p",[s._v("​\t理解了什么是最长递增子序列，接下来我们就可以求解 source 数组的最长递增子序列了:")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("moved"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算最长递增子序列")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" seq "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sources"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ 0, 1 ]")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("blockquote",[t("p",[s._v("使用 lis 函数计算一个数组的最长递增子序列。lis 函数接收source 数组作为参数，并返回 source 数组的最长递增子序列之一。")])]),s._v(" "),t("p",[s._v("​\t在上例中，你可能疑惑为什么通过 lis 函数计算得到的是 [0, 1]？实际上，source 数组 [2, 3, 1, -1] 的最长递增子序列应该是 [2, 3]，但我们得到的结果是 [0, 1]，这是为什么呢？这是因为 lis 函数的"),t("strong",[s._v("返回结果是最长递增子序列中的元素在 source 数组中的位置索引")]),s._v(":")]),s._v(" "),t("p",[t("img",{attrs:{src:a(685),alt:"递增子序列中存储的是source数组内元素的位置索引"}})]),s._v(" "),t("blockquote",[t("p",[s._v("因为 source 数组的最长递增子序列为 [2, 3]，其中元素 2 在该数组中的索引为 0，而数组 3 在该数组中的索引为 1，所以最终结果为 [0, 1]。")])]),s._v(" "),t("p",[s._v("​\t有了最长递增子序列的索引信息后，下一步要重新对节点进行编号:")]),s._v(" "),t("p",[t("img",{attrs:{src:a(686),alt:"重新对节点进行编号后的状态"}})]),s._v(" "),t("blockquote",[t("p",[s._v("注意，在编号时，我们忽略了经过预处理的节点 p-1 和 p-5。所以，索引为 0 的节点是 p-2，而索引为 1 节点是 p-3，以此类推。")]),s._v(" "),t("p",[s._v("重新编号是为了让子序列 seq 与新的索引值产生对应关系。其实，最长递增子序列 seq 拥有一个非常重要的意义。")]),s._v(" "),t("p",[s._v("以上例来说，子序列 seq 的值为 [0, 1]，它的含义是：**在新的一组子节点中，重新编号后索引值为 0 和 1 的这两个节点在更新前后顺序没有发生变化。**换句话说，重新编号后，索引值为 0 和 1 的节点不需要移动（因为递增，位置不用动）。在新的一组子节点中，节点 p-3 的索引为0，节点 p-4 的索引为 1，所以节点 p-3 和 p-4 所对应的真实 DOM 不需要移动。换句话说，只有节点 p-2 和 p-7 可能需要移动。")])]),s._v(" "),t("p",[s._v("​\t 为了完成节点的移动，我们还需要创建两个索引值 i 和 s：")]),s._v(" "),t("ul",[t("li",[s._v("用索引 i 指向新的一组子节点中的最后一个节点；")]),s._v(" "),t("li",[s._v("用索引 s 指向最长递增子序列中的最后一个元素。")])]),s._v(" "),t("p",[s._v("​\t为了简化图示，我们在去掉了旧的一组子节点以及无关的线条和变量：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(687),alt:"建立索引s和i，分别指向子序列和索引的最后一个位置"}})]),s._v(" "),t("p",[s._v("​\t接下来，我们将开启一个 for 循环，让变量 i 和 s 按照上图中箭头的方向移动：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("moved"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" seq "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sources"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s 指向最长递增子序列的最后一个元素")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i 指向新的一组子节点的最后一个元素")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for 循环使得 i 递减，即按照图 11-24 中箭头的方向移动")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果节点的索引 i 不等于 seq[s] 的值，说明该节点需要移动")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 i === seq[s] 时，说明该位置的节点不需要移动")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只需要让 s 指向下一个位置")]),s._v("\n       s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("blockquote",[t("p",[s._v("其中，for 循环的目的是让变量 i 按照上图中箭头的方向移动，以便能够逐个访问新的一组子节点中的节点，这里的变量 i 就是节点的索引。")]),s._v(" "),t("p",[s._v("在 for 循环内，判断条件 i!== seq[s]，如果节点的索引 i 不等于 seq[s] 的值，则说明该节点对应的真实 DOM需要移动，否则说明当前访问的节点不需要移动，但这时变量 s 需要按照上图中箭头的方向移动，即让变量 s 递减。")])]),s._v(" "),t("p",[s._v("​\t接下来我们就按照上述思路执行更新。初始时索引 i 指向节点 p-7。由于节点 p-7 对  应的 source 数组中相同位置的元素值为 -1，所以我们应该将节点 p-7 作为全新的节点进行挂载：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("moved"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" seq "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sources"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s 指向最长递增子序列的最后一个元素")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i 指向新的一组子节点的最后一个元素")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for 循环使得 i 递减，即按照图 11-24 中箭头的方向移动")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 说明索引为 i 的节点是全新的节点，应该将其挂载")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该节点在新 children 中的真实位置索引")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" newStart\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该节点的下一个节点的位置索引")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nextPos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 锚点")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" anchor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nextPos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("nextPos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("el\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 挂载")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("patch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" anchor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果节点的索引 i 不等于 seq[s] 的值，说明该节点需要移动")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 i === seq[s] 时，说明该位置的节点不需要移动")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只需要让 s 指向下一个位置")]),s._v("\n       s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("blockquote",[t("p",[s._v("如果 source[i] 的值为 -1，则说明索引为 i 的节点是全新的节点，于是我们调用 patch函数将其挂载到容器中。")]),s._v(" "),t("p",[s._v("注意，由于索引 i 是重新编号后的，因此为了得到真实索引值，我们需要计算表达式 i + newStart 的值。")])]),s._v(" "),t("p",[s._v("​\t新节点创建完毕后，for 循环已经执行了一次，此时索引 i 向上移动一步，指向了节点p-2：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(688),alt:"节点以及索引的当前状态"}})]),s._v(" "),t("blockquote",[t("p",[s._v("​\t 接着，进行下一轮 for 循环：")]),s._v(" "),t("p",[s._v("1、source[i] 是否等于 -1？很明显，此时索引 i 的值为 2，source[2] 的值等于 1，因此节点 p-2 不是全新的节点，不需要挂载它，进行下一步的判断。")]),s._v(" "),t("p",[s._v("2、i !== seq[s] 是否成立？此时索引 i 的值为 2，索引 s 的值为 1。因此 2 !== seq[1] 成立，节点 p-2 所对应的真实 DOM 需要移动。")])]),s._v(" "),t("p",[s._v("​\t在第二步中，我们知道了节点 p-2 所对应的真实 DOM 应该移动：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("moved"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" seq "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sources"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s 指向最长递增子序列的最后一个元素")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("source"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略部分代码")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 说明该节点需要移动")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该节点在新的一组子节点中的真实位置索引")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" newStart\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newVNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该节点的下一个节点的位置索引")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nextPos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 锚点")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" anchor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nextPos "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" newChildren"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("nextPos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("el\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 移动")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("insert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("newVNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("el"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" container"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" anchor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 i === seq[s] 时，说明该位置的节点不需要移动")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 并让 s 指向下一个位置")]),s._v("\n       s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("blockquote",[t("p",[s._v("移动节点的实现思路类似于挂载全新的节点。不同点在于，移动节点是通过 insert 函数来完成的。")])]),s._v(" "),t("p",[s._v("​\t接着，进行下一轮的循环。此时索引 i 指向节点 p-4：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(689),alt:"节点以及索引的当前状态"}})]),s._v(" "),t("blockquote",[t("p",[s._v("​\t更新过程仍然分为三个步骤：")]),s._v(" "),t("p",[s._v("1、判断表达式 source[i] 的值是否等于 -1？很明显，此时索引 i 的值为 1，表达式 source[1] 的值等于 3，条件不成立。所以节点 p-4 不是全新的节点，不需要挂载它。接着进行下一步判断。")]),s._v(" "),t("p",[s._v("2、判断表达式 i !== seq[s] 是否成立？此时索引 i 的值为 1，索引 s 的值为1。这时表达式 1 === seq[1] 为真，所以条件 i !== seq[s] 也不成立。")]),s._v(" "),t("p",[s._v("3、由于第一步和第二步中的条件都不成立，所以代码会执行最终的 else 分支。这意味着，节点 p-4 所对应的真实 DOM 不需要移动，但我们仍然需要让索引 s的值递减，即 s--。")]),s._v(" "),t("p",[s._v("​\t经过三步判断之后，我们得出结论：节点 p-4 不需要移动。")])]),s._v(" "),t("p",[s._v("​\t于是进行下一轮循环，此时的状态如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(690),alt:"节点以及索引的当前状态"}})]),s._v(" "),t("blockquote",[t("p",[s._v("​\t此时索引 i 指向节点 p-3。我们继续进行三个步骤的判断：")]),s._v(" "),t("p",[s._v("1、判断表达式 source[i] 的值是否等于 -1？很明显，此时索引 i 的值为 0，表 达式 source[0] 的值等于 2，所以节点 p-3 不是全新的节点，不需要挂载它，接着进行下一步判断。")]),s._v(" "),t("p",[s._v("2、第二步：判断表达式 i !== seq[s] 是否成立？此时索引 i 的值为 0，索引 s 的值也为0。这时表达式 0 === seq[0] 为真，因此条件也不成立，最终将执行 else 分支的代码，也就是第三步。")]),s._v(" "),t("p",[s._v("3、到了这里，意味着节点 p-3 所对应的真实 DOM 也不需要移动。")]),s._v(" "),t("p",[s._v("​\t在这一轮更新完成之后，循环将会停止，更新完成。")])]),s._v(" "),t("h3",{attrs:{id:"求解给定序列的最长递增子序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#求解给定序列的最长递增子序列"}},[s._v("#")]),s._v(" 求解给定序列的最长递增子序列")]),s._v(" "),t("p",[s._v("​\t如下是用于求解给定序列的最长递增子序列的代码，取自 Vue.js 3：")]),s._v(" "),t("div",{staticClass:"language-typescript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSequence")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("slice")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" u"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" arrI "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrI "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arrI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j\n         result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n       u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n       v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arrI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrI "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("u"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("u"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n   v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("u"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("u"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" v\n     v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br")])]),t("blockquote",[t("p",[s._v("注意,源码中 0 表示新增节点，所以上面代码是 !==0 表示跳过。前面的示例中是用 -1 表示新增节点。")])]),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("ul",[t("li",[s._v("快速 Diff 算法在实测中性能最优。它借鉴了文本 Diff 中的预处理思路，先处理新旧两组子节点中相同的前置节点和相同的后置节点。")]),s._v(" "),t("li",[s._v("当前置节点和后置节点全部处理完毕后，如果无法简单地通过挂载新节点或者卸载已经不存在的节点来完成更新，则需要根据节点的索引关系，构造出一个最长递增子序列。")]),s._v(" "),t("li",[s._v("最长递增子序列所指向的节点即为不需要移动的节点。")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("算法")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("简单 Diff 算法")]),s._v(" "),t("td",[s._v("当索引大于最大索引值，说明需要移动")])]),s._v(" "),t("tr",[t("td",[s._v("双端 Diff 算法")]),s._v(" "),t("td",[s._v("两端指针双双比较，key 相同时需要移动，或者 patch")])]),s._v(" "),t("tr",[t("td",[s._v("快速 Diff 算法")]),s._v(" "),t("td",[s._v("在简单 Diff 的基础上，先处理相同的前置和后置节点，对于中间的节点得到最长递增子序列，子序列指向的节点即为不需要移动的节点。")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("核心概念都是，先找到需要移动的节点，再解决怎样移动的问题，最后再处理新增删除，或其他边界情况。")]),s._v(" "),t("p",[s._v("Vue2：双端 Diff 算法，新旧虚拟 DOM 进行头头、尾尾、旧头新尾、新头旧尾循环对比。")]),s._v(" "),t("p",[s._v("Vue3：快速 Diff 算法，先预处理相同头尾，再计算中间部分的最长递增子序列用于 DOM 移动与修改。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);