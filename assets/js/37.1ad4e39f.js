(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{824:function(v,_,t){v.exports=t.p+"assets/img/c27665d88e2b4de48496415d3c8f3189tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.5396b3e1.png"},825:function(v,_,t){v.exports=t.p+"assets/img/4b2f18df6e5b40279d8a571a6ec5860btplv-k3u1fbpfcp-zoom-in-crop-mark1512000.d0f59b2a.png"},826:function(v,_,t){v.exports=t.p+"assets/img/f519c40f7a27439bb93650b547e131c2tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.11216e15.png"},827:function(v,_,t){v.exports=t.p+"assets/img/8ad3986c7b6a4f6ca5f9533e5b88394atplv-k3u1fbpfcp-zoom-in-crop-mark1512000.92278dc4.png"},828:function(v,_,t){v.exports=t.p+"assets/img/SSR1.145eb4e4.png"},829:function(v,_,t){v.exports=t.p+"assets/img/SSR2.19a5a799.png"},830:function(v,_,t){v.exports=t.p+"assets/img/640.33abb9e8.png"},831:function(v,_,t){v.exports=t.p+"assets/img/640-1722060449117-10.cb165629.png"},832:function(v,_,t){v.exports=t.p+"assets/img/640-1722060803852-13.11e309f3.png"},833:function(v,_,t){v.exports=t.p+"assets/img/75c07d4f2bc949faa9e9ab0576ee7db0tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.bc00e083.png"},834:function(v,_,t){v.exports=t.p+"assets/img/3e7658c852d542d19929239794875b04tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.c34e2b16.png"},967:function(v,_,t){"use strict";t.r(_);var s=t(2),a=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"渲染的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渲染的概念"}},[v._v("#")]),v._v(" 渲染的概念")]),v._v(" "),_("blockquote",[_("p",[v._v("​\t在Web开发中，渲染（Rendering）是一个核心概念，指的是将应用程序的数据（data）与模板（template）结合，生成最终的HTML页面，这个页面随后会被浏览器解析并展示给用户。这个过程是动态Web应用的核心，因为它允许开发者根据不同的数据动态地生成页面内容，而不是每次更改都需要手动编写静态的HTML文件。")])]),v._v(" "),_("p",[v._v("我们可以简单地把渲染理解为："),_("strong",[v._v("渲染就是将页面数据和页面模版组装成html的过程")])]),v._v(" "),_("p",[v._v("也就是： "),_("strong",[v._v("data + template = html")]),v._v("，当然data也可能什么都没有，没有数据也是一种数据")]),v._v(" "),_("ul",[_("li",[v._v("客户端渲染就是 "),_("code",[v._v("data + template = html")]),v._v(" 过程在客户端进行，服务器直接转发静态 html 资源即可")]),v._v(" "),_("li",[v._v("服务端渲染就是 "),_("code",[v._v("data + template = html")]),v._v(" 过程在服务端进行，客户端不需要渲染页面")]),v._v(" "),_("li",[v._v("静态化渲染就是打包的时候进行 "),_("code",[v._v("data + template = html")]),v._v(" 过程，然后客户端在请求时，服务端不做任何处理，直接以原文件的形式返回给客户端，客户端获取到页面后，在加载完 JS 后才通过 JS 来渲染页面内容。")])]),v._v(" "),_("h2",{attrs:{id:"单页应用和多页应用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单页应用和多页应用"}},[v._v("#")]),v._v(" 单页应用和多页应用")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("单页应用：")]),v._v(" "),_("ul",[_("li",[v._v("只有一个页面，可以部分更新，通过vue 的diff对比树结构的不同而部分更新，点击跳转新页面并不产生新的html，所以跳转时缓存不会消失，不需要把数据存在本地里面")])])]),v._v(" "),_("li",[_("p",[v._v("多页应用：")]),v._v(" "),_("ul",[_("li",[v._v("有多个页面，每一次跳转都会生成新的html，整棵树都会重新构建，而不是部分更新，state一刷新就没了，所以就经常要把数据存在localstorage、sessionstorage、cookie里面")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("多页面应用（MPA）")]),v._v(" "),_("th",[v._v("单页面应用（SPA）")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[v._v("组成")])]),v._v(" "),_("td",[v._v("一个外壳页面和多个页面片段组成")]),v._v(" "),_("td",[v._v("多个完整页面构成（但外观看起来只有一个页面）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("资源共用")])]),v._v(" "),_("td",[v._v("不共用，每个页面都需要加载CSS和JS")]),v._v(" "),_("td",[v._v("共用，只需在外壳部分加载CSS和JS")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("刷新方式")])]),v._v(" "),_("td",[v._v("整页刷新")]),v._v(" "),_("td",[v._v("页面局部刷新或更改")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("URL模式")])]),v._v(" "),_("td",[_("code",[v._v("a.com/pageone.html")]),v._v(", "),_("code",[v._v("a.com/pagetwo.html")]),v._v(" 等")]),v._v(" "),_("td",[_("code",[v._v("a.com/#/pageone")]),v._v(", "),_("code",[v._v("a.com/#/pagetwo")]),v._v(" 等（Hash模式）或 "),_("code",[v._v("a.com/pageone")]),v._v(", a.com/pagetwo（History模式，需要服务器支持）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("用户体验")])]),v._v(" "),_("td",[v._v("页面切换加载缓慢，流畅度不够")]),v._v(" "),_("td",[v._v("页面片段间的切换快，用户体验良好")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("转场动画")])]),v._v(" "),_("td",[v._v("容易实现")]),v._v(" "),_("td",[v._v("容易实现（但SPA通常提供更好的转场效果）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("数据传递")])]),v._v(" "),_("td",[v._v("依赖URL传参、cookie、localStorage等")]),v._v(" "),_("td",[v._v("容易，可以通过 JavaScript 在内存中直接传递")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("搜索引擎优化（SEO）")])]),v._v(" "),_("td",[v._v("较差，需要服务器端渲染（SSR）优化")]),v._v(" "),_("td",[v._v("实现方法较为困难，不利于SEO检索（但可通过预渲染等技术改善）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("适用范围")])]),v._v(" "),_("td",[v._v("适用于追求高度支持搜索引擎的应用")]),v._v(" "),_("td",[v._v("高要求的体验度、追求界面流畅的应用")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("开发成本")])]),v._v(" "),_("td",[v._v("较低，但页面重复代码多")]),v._v(" "),_("td",[v._v("较高，常需借助专业的框架和库")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("维护成本")])]),v._v(" "),_("td",[v._v("相对复杂")]),v._v(" "),_("td",[v._v("相对容易（一旦架构搭建好，后续维护较为简单）")])])])])])]),v._v(" "),_("h2",{attrs:{id:"页面的渲染流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面的渲染流程"}},[v._v("#")]),v._v(" 页面的渲染流程")]),v._v(" "),_("p",[v._v("1、浏览器通过请求得到一个HTML文本")]),v._v(" "),_("p",[v._v("2、渲染进程解析HTML文本，构建DOM树")]),v._v(" "),_("p",[v._v("3、解析HTML的同时，如果遇到内联样式或者样式脚本，则下载并构建样式规则（stytle rules），若遇到JavaScript脚本，则会下载执行脚本")]),v._v(" "),_("p",[v._v("4、DOM树和样式规则构建完成之后，渲染进程将两者合并成渲染树（render tree）")]),v._v(" "),_("p",[v._v("5、渲染进程开始对渲染树进行布局，生成布局树（layout tree）")]),v._v(" "),_("p",[v._v("6、渲染进程对布局树进行绘制，生成绘制记录")]),v._v(" "),_("p",[v._v("7、渲染进程对布局树进行分层，分别栅格化每一层，并得到合成帧")]),v._v(" "),_("p",[v._v("8、渲染进程将合成帧信息发送给GPU进程显示到页面中")]),v._v(" "),_("p",[_("img",{attrs:{src:t(824),alt:"渲染流程"}})]),v._v(" "),_("h2",{attrs:{id:"渲染模式分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渲染模式分类"}},[v._v("#")]),v._v(" 渲染模式分类")]),v._v(" "),_("ul",[_("li",[v._v("CSR："),_("code",[v._v("Client Side Rendering")]),v._v("，客户端（通常是浏览器）渲染")]),v._v(" "),_("li",[v._v("SSR："),_("code",[v._v("Server Side Rendering")]),v._v("，服务端渲染")]),v._v(" "),_("li",[v._v("SSG："),_("code",[v._v("Static Site Generation")]),v._v("，静态网站生成")]),v._v(" "),_("li",[v._v("ISR："),_("code",[v._v("Incremental Site Rendering")]),v._v("，增量式的网站渲染")]),v._v(" "),_("li",[v._v("DPR："),_("code",[v._v("Distributed Persistent Rendering")]),v._v("，分布式的持续渲染")])]),v._v(" "),_("h2",{attrs:{id:"从-csr-到-ssr"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从-csr-到-ssr"}},[v._v("#")]),v._v(" 从 CSR 到 SSR")]),v._v(" "),_("p",[_("img",{attrs:{src:t(825),alt:"1"}})]),v._v(" "),_("h3",{attrs:{id:"csr客户端渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#csr客户端渲染"}},[v._v("#")]),v._v(" CSR客户端渲染")]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t当用户访问某个URL时，服务端返回的HTML是不包含页面具体内容的骨架，然后"),_("strong",[v._v("由客户端的JavaScript来完成页面的渲染")]),v._v("。")]),v._v(" "),_("p",[v._v("​\t"),_("em",[v._v("对于使用Vue或者React构建的单页面web应用，当我们打开浏览器访问页面时服务器一般只会返回一个比较简单的html模版，之后浏览器再加载相应的js并进行解析，生成dom元素将页面渲染出来。")])])]),_("p",[v._v("​\t普通的单页应用只有一个 HTML，在浏览器请求页面时，服务端只会生成一个无具体内容的 html 文件，之后都是浏览器通过加载并执行 chunk.js 这种 JavaScript 去动态更新，所以无法被爬虫识别，不利于SEO。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(826),alt:"2828104768-61c44c17d2a05_fix732.png"}})]),v._v(" "),_("p",[v._v("​\t这种渲染方式虽然在后续的页面切换速度很快，但是也明显存在两个问题：纯客户端的 SPA 在"),_("strong",[v._v("首屏加载")]),v._v("和 "),_("strong",[v._v("SEO")]),v._v(" 方面有显著的问题，因为浏览器会收到一个巨大的 HTML 空页面，只有等到 JavaScript 加载完毕才会渲染出内容，白屏时间过长且 SEO 不友好。")]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t优点：")]),v._v(" "),_("p",[v._v("1、响应速度快：一旦HTML文件加载完成，浏览器就可以开始渲染页面，而不需要等待服务器返回完整的渲染结果")]),v._v(" "),_("p",[v._v("2、动态性强：页面渲染在客户端进行，因此可以方便地实现更好的交互性和动态效果")]),v._v(" "),_("p",[v._v("3、前端部署简单：只需要一个静态服务即可部署前端代码，降低了部署成本")]),v._v(" "),_("p",[v._v("4、减轻服务端的压力，因为大部分渲染工作都在客户端完成")]),v._v(" "),_("p",[v._v("​\t缺点：")]),v._v(" "),_("p",[v._v("1、首屏加载慢：需要等待 JavaScript 下载和执行，可能导致首屏加载时间较长，特别是对于复杂的单页应用（SPA）")]),v._v(" "),_("p",[v._v("2、不利于SEO：有些搜索引擎爬虫无法执行 JavaScript，看不到完整的程序源码，获取不到页面关键信息")]),v._v(" "),_("p",[v._v("3、白屏时间：在JavaScript代码加载和执行期间，用户可能会看到空白的页面，即所谓的“白屏时间”")])]),_("blockquote",[_("p",[v._v("SSR 最早是为了解决单页应用SPA产生的 SEO、首屏渲染时间等问题而诞生的。")])]),v._v(" "),_("h3",{attrs:{id:"ssr服务端渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssr服务端渲染"}},[v._v("#")]),v._v(" SSR服务端渲染")]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t当用户访问某个URL时，"),_("strong",[v._v("服务端实时生成包含内容的HTML文件")]),v._v("，返回给浏览器解析后能直接构建出有内容的页面。")]),v._v(" "),_("p",[v._v("​\t"),_("em",[v._v("页面html先在服务端渲染完成，此刻得到的一堆的html字符串，返回给浏览器后便可直接进行解析渲染，完成后用户便可看到完整的页面，大大减少了白屏时间，之后再加载js，使网页可进行正常交互。")])])]),_("p",[v._v("​\t在服务端直接实时同构渲染用户看到的页面，整个查数据库的过程以及 html 都由服务端生成，客户端只需要识别返回的一大堆 html 代码。能让服务器直接返回渲染好的 HTML，让用户在 JavaScript 下载完毕前就看到页面内容，提高用户使用体验。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(827),alt:"3820410511-61c44c2ade37a_fix732.png"}})]),v._v(" "),_("p",[v._v("​\t这种渲染方式需要一个服务器承载页面的实时请求、渲染和响应，增大了服务端的开发和运维的成本。对于一些较为"),_("strong",[v._v("静态场景")]),v._v("，比如博客、官网等，它们的内容相对确定，变化不频繁，每次请求都会重新生成页面，且每次通过服务端渲染出来的内容都是一样的，浪费了很多没必要的"),_("strong",[v._v("服务器资源")]),v._v("。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(828),alt:"SSR1"}})]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t优点：")]),v._v(" "),_("p",[v._v("1、首屏加载速度快：服务器已经生成了完整的HTML页面，可以生成缓存片段，因此客户端可以直接显示这个页面，无需等待JavaScript加载和执行")]),v._v(" "),_("p",[v._v("2、SEO友好：搜索引擎爬虫可以直接看到渲染好的 HTML，有利于SEO优化")]),v._v(" "),_("p",[v._v("3、适合复杂页面：对于包含大量数据、需要复杂计算的页面，SSR可以更好地处理并减少客户端的负载")]),v._v(" "),_("p",[v._v("​\t缺点：")]),v._v(" "),_("p",[v._v("1、服务端压力大：对于每个请求，服务器都需要重新渲染页面，这可能导致服务器压力过大，可以用静态化来解决")]),v._v(" "),_("p",[v._v("2、无法交互：SSR 是直接产出 HTML 的代码，DOM 元素事件绑定的逻辑仍然需要 JS 才能够完成，因此页面不可以交互")]),v._v(" "),_("blockquote",[_("p",[v._v("解决方案：SSR页面引入CSR的脚本（同构）。在实际场景中，会在SSR页面中加入CSR的脚本，完成DOM的事件绑定，这个完成事件绑定的过程，也被称为 Hydration。")])]),v._v(" "),_("p",[v._v("3、传统服务端渲染的用户体验较差、不容易维护，通常前端改了部分 html 或者 css，后端也需要修改")]),v._v(" "),_("p",[v._v("4、开发调试困难：开发要考虑到服务器端和客户端环境的差异，调试要考虑到服务器端和客户端的日志和错误信息")])]),_("h2",{attrs:{id:"从-ssr-到-ssg"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从-ssr-到-ssg"}},[v._v("#")]),v._v(" 从 SSR 到 SSG")]),v._v(" "),_("blockquote",[_("p",[v._v("​\tSSG在构建的过程当中，也就是当执行 "),_("code",[v._v("npm build")]),v._v(" 时，就可以生成完整的HTML内容，构建完成后进行HTML部署，在生产环境下就不需要服务器的开发、运维相关的工作，研发和运维的成本会比SSR低一些")])]),v._v(" "),_("h3",{attrs:{id:"ssg静态页面生成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssg静态页面生成"}},[v._v("#")]),v._v(" SSG静态页面生成")]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t"),_("strong",[v._v("在构建时预先渲染")]),v._v("页面并生成静态的 HTML，把生成的HTML静态资源部署到服务器后，用户访问某个URL时，服务端"),_("strong",[v._v("直接返回包含页面内容的HTML")]),v._v("即可。")]),v._v(" "),_("p",[v._v("​\t"),_("em",[v._v("在项目构建时生成包含内容的html，之后将相应的html、js、css等静态资源发布到相应的CDN节点，这样当用户进行访问时页面可直接渲染。")])])]),_("p",[v._v("​\t服务端会预加载，先把所有 html 页面都生成好并放到CDN上，在客户端需要的时候直接返回，"),_("strong",[v._v("不需要服务器实时渲染和响应")]),v._v("，大大节约了服务器运维成本和资源，比 SSR 少了一个去数据库CRUD的操作，效率更高，SEO友好，但是只适合页面内容较为静态的场景，比如官网、博客等，因为服务端渲染可以提前完成。")]),v._v(" "),_("p",[v._v("​\t但它"),_("strong",[v._v("对服务器的要求很高")]),v._v("，因为如果有成千上万个页面，它就要预先生成成千上万个模板，需要耗费很多服务器资源。难以应对"),_("strong",[v._v("高度动态的内容或页面数量很多")]),v._v("的情况，因为在静态构建时不能拿到最新的数据，也无法枚举海量页面。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(829),alt:"SSR2"}})]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t优点：")]),v._v(" "),_("p",[v._v("1、性能卓越：页面是静态的，因此无需等待服务器渲染，直接由浏览器加载显示，具有极快的页面加载速度")]),v._v(" "),_("p",[v._v("2、安全性高：服务器只提供静态文件，因此降低了遭受攻击的风险")]),v._v(" "),_("p",[v._v("3、服务器压力小，减轻服务端的渲染压力，继承了SSR首屏性能以及优秀的SEO支持")]),v._v(" "),_("p",[v._v("4、适合内容型网站：对于数据变化频率较低的内容型网站（如博客、文档网站等），SSG是一个很好的选择")]),v._v(" "),_("p",[v._v("​\t缺点：")]),v._v(" "),_("p",[v._v("1、动态性受限：页面是静态的，因此难以实现复杂的动态交互效果，不适用于数据经常变化的场景")]),v._v(" "),_("p",[v._v("2、构建时间长：对于频繁更新数据的大型网站不太适合，因为需要重新构建和部署整个网站，构建时间可能会比较长")]),v._v(" "),_("p",[v._v("3、不适合频繁更新：对于需要频繁更新数据的网站，SSG可能不太适合，因为每次更新都需要重新构建并部署整个网站")])]),_("blockquote",[_("p",[v._v("​\tSSG 虽然可以很好的将页面静态资源进行提前进行构建并部署到CDN来提高用户访问效率，也很好的解决了白屏时间过长和 SEO 不友好的问题。但若要生成的页面过多，比如有十几万个，那么很难在服务端一次性生成，全量预渲染整个网站是不现实的，这时，就需要使用到ISR做增量渲染了。")])]),v._v(" "),_("h2",{attrs:{id:"从-ssg-到-isr-dpr"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从-ssg-到-isr-dpr"}},[v._v("#")]),v._v(" 从 SSG 到 ISR/DPR")]),v._v(" "),_("h3",{attrs:{id:"isr增量渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#isr增量渲染"}},[v._v("#")]),v._v(" ISR增量渲染")]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"title"}),_("p",[v._v("​\tNext.js 推出的 ISR(Incremental Static Regeneration) 方案，是基于SSG进行实现的，对比SSG只是增加了Server端的逻辑。")]),v._v(" "),_("p",[v._v("​\t允许"),_("strong",[v._v("在应用运行时再重新生成每个页面 HTML（允许网站在不需要重新构建整个站点的情况下，仅对发生变化的部分进行更新和重新生成）")]),v._v("。这样即使有海量页面，也能使用上 SSG 的特性。一般来说，使用 ISR 需要 "),_("code",[v._v("getStaticPaths")]),v._v(" 和 "),_("code",[v._v("getStaticProps")]),v._v(" 同时配合使用。")])]),_("ul",[_("li",[v._v("关键性的页面（如网站首页、热点数据等）预渲染为静态页面，缓存至 CDN，保证最佳的访问性能")]),v._v(" "),_("li",[v._v("非关键性的页面（如流量很少的老旧内容）先响应 fallback 内容，然后浏览器渲染（CSR）为实际数据；同时对页面进行异步预渲染，之后缓存至 CDN，提升后续用户访问的性能")])]),v._v(" "),_("p",[_("img",{attrs:{src:t(830),alt:"图片"}})]),v._v(" "),_("p",[v._v("​\t页面的更新始终返回 CDN 的缓存数据（无论是否过期）；如果数据已经过期，那么触发异步的预渲染，异步更新 CDN 的缓存。请求页面，页面数据未过期，返回预渲染页面；页面数据过期，拉取最新数据，重新预渲染。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(831),alt:"图片"}})]),v._v(" "),_("blockquote",[_("p",[v._v("​\t优点：")]),v._v(" "),_("p",[v._v("1、具有 SSG 的所有优点，并且它减少了应用程序的构建和部署时间，因为它避免了在构建期间预渲染所有页面")]),v._v(" "),_("p",[v._v("2、如果数据有任何更新，则重新生成页面，而无需重建整个应用程序")]),v._v(" "),_("p",[v._v("3、提高了网站的更新效率")]),v._v(" "),_("p",[v._v("​\t缺点：")]),v._v(" "),_("p",[v._v("1、对于没有预渲染的页面，用户首次访问将会看到一个 fallback 页面，此时服务端才开始渲染页面，直到渲染完毕。这就导致用户"),_("strong",[v._v("体验上的不一致")])]),v._v(" "),_("p",[v._v("2、对于已经被预渲染的页面，用户直接从 CDN 加载，"),_("strong",[v._v("但这些页面可能是已经过期")]),v._v("的，甚至过期很久的，只有在用户刷新一次，第二次访问之后，才能看到新的数据。对于电商这样的场景而言，是不可接受的（比如商品已经卖完了，但用户看到的过期数据上显示还有）")]),v._v(" "),_("p",[v._v("3、实现起来可能较为复杂，需要额外的配置和管理")])]),v._v(" "),_("h3",{attrs:{id:"dpr分布式持久渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dpr分布式持久渲染"}},[v._v("#")]),v._v(" DPR分布式持久渲染")]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"title"}),_("p",[v._v("​\tDPR 是一种利用分布式计算资源进行持续渲染的技术。它可能涉及在多个节点上并行处理渲染任务，以提高渲染效率和可扩展性。然而，DPR 并不是一个广泛认可或标准化的前端渲染技术术语，它可能代表了某种特定技术或方案的概念。")])]),_("p",[v._v("​\tDPR 本质上讲，是对 ISR 的模型做了几处改动，并且搭配上 CDN 的能力：")]),v._v(" "),_("p",[v._v("1、去除了 "),_("code",[v._v("fallback")]),v._v(" 行为，而是直接用 "),_("code",[v._v("On-demand Builder")]),v._v("（按需构建器）来响应未经过预渲染的页面，然后将结果缓存至 "),_("code",[v._v("CDN")])]),v._v(" "),_("p",[v._v("2、数据页面过期时，不再响应过期的缓存页面，而是 "),_("code",[v._v("CDN")]),v._v(" 回源到 "),_("code",[v._v("Builder")]),v._v(" 上，渲染出最新的数据")]),v._v(" "),_("p",[v._v("3、每次发布新版本时，自动清除 "),_("code",[v._v("CDN")]),v._v(" 的缓存数据")]),v._v(" "),_("p",[_("img",{attrs:{src:t(832),alt:"图片"}})]),v._v(" "),_("blockquote",[_("p",[v._v("​\t优点：")]),v._v(" "),_("p",[v._v("1、提高渲染效率和可扩展性。")]),v._v(" "),_("p",[v._v("2、利用分布式资源优化渲染性能。")]),v._v(" "),_("p",[v._v("​\t缺点：")]),v._v(" "),_("p",[v._v("1、新页面访问可能会触发 On-demand Builder 同步渲染，导致当次请求响应时间比较长；")]),v._v(" "),_("p",[v._v("2、DoS 攻击比较难防御，因为攻击者可能会大量访问新页面，导致 Builder 被大量并行运行，这里需要平台方实现 Builder 的归一化和串行运行")])]),v._v(" "),_("h2",{attrs:{id:"混合渲染模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#混合渲染模式"}},[v._v("#")]),v._v(" 混合渲染模式")]),v._v(" "),_("blockquote",[_("p",[v._v("混合渲染模式（Hybrid Rendering Modes）是现代Web开发中非常流行且有效的策略，旨在结合不同渲染技术的优点以优化网站性能和用户体验。")])]),v._v(" "),_("h3",{attrs:{id:"ssr-csr"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssr-csr"}},[v._v("#")]),v._v(" SSR + CSR")]),v._v(" "),_("p",[v._v("​\tSSR 似乎已经解决了 CSR 带来的问题，但 CSR 也有自己的优势，比如使用 CSR 时，页面切换无需刷新，无需重新请求整个 HTML 的内容。因此，我们可以各取所长，各补其短，于是就有了 SSR + CSR 的方案：")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("首次加载页面走 SSR")]),v._v("：保证首屏加载速度的同时，并且满足 SEO 的诉求")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("页面切换走 CSR")]),v._v("：Next.js 会发起一次网络请求，执行 "),_("code",[v._v("getServerSideProps")]),v._v(" 函数，拿到它返回的数据后，进行页面渲染")]),v._v(" "),_("p",[v._v("​\t二者的有机结合，可以大大减少后端服务器的压力和成本，还能提高页面切换的速度，进一步提升用户的体验。")])])]),v._v(" "),_("blockquote",[_("p",[v._v("​\t优势：")]),v._v(" "),_("p",[v._v("1、首屏加载速度快：通过SSR生成初始的HTML，可以确保首屏内容迅速展示给用户，这对SEO和用户体验都至关重要。")]),v._v(" "),_("p",[v._v("2、后续页面切换流畅：页面切换时，CSR接管页面渲染，通过JavaScript动态更新页面内容，避免了整页刷新，提升了用户体验。")]),v._v(" "),_("p",[v._v("3、减轻服务器压力：非首次访问的页面切换主要由客户端处理，减少了服务器的渲染负担。")])]),v._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t适用于需要快速首屏加载且后续页面交互频繁的Web应用，如电商平台、新闻网站等。")])]),_("h3",{attrs:{id:"ssg-csr"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssg-csr"}},[v._v("#")]),v._v(" SSG + CSR")]),v._v(" "),_("p",[v._v("​\tSSR 需要较高的服务器运维成本。对于某些静态网站或者实时性要求较低的网站来说，是没有必要使用 SSR 的。那么如果用 SSG 代替 SSR，使用 SSG + CSR 的方案，是不是会更好：")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("静态内容走 SSG")]),v._v("：对于页面中较为静态的内容，比如导航栏、布局等，可以在编译构建时预先渲染静态 HTML")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("动态内容走 CSR")]),v._v("：一般会在 useEffect 中请求接口获取动态数据，然后进行页面重新渲染")]),v._v(" "),_("p",[v._v("​\t虽然从体验来说，动态内容需要页面重新渲染后才能出现，体验上没有 SSR 好，但是避免 SSR 带来的高额服务器成本的同时，也能保证首屏渲染时间不会太长，相比纯 CSR 来说，还是提升了用户体验。")])])]),v._v(" "),_("blockquote",[_("p",[v._v("​\t优势：")]),v._v(" "),_("p",[v._v("1、低成本高效能：SSG预先生成静态HTML，部署到CDN后，可以高效分发内容，降低了服务器成本。")]),v._v(" "),_("p",[v._v("2、动态内容灵活更新：CSR允许页面在客户端根据用户交互动态加载数据，保持了应用的灵活性和响应性。")]),v._v(" "),_("p",[v._v("3、SEO友好：由于初始页面是静态的，因此仍然对SEO友好。")])]),v._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t适用于内容相对静态但偶尔需要动态更新的网站，如博客、文档站点等。")])]),_("h3",{attrs:{id:"ssg-ssr"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssg-ssr"}},[v._v("#")]),v._v(" SSG + SSR")]),v._v(" "),_("p",[v._v("​\t在上面介绍的 ISR 方案时提及过，ISR 的实质是 SSG + SSR：")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("静态内容走 SSG")]),v._v("：编译构建时把相对静态的页面预先渲染生成 HTML，浏览器请求时直接返回静态 HTML")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("动态内容走 SSR")]),v._v("：浏览器请求未预先渲染的页面，在运行时通过 SSR 渲染生成页面，然后返回到浏览器，并缓存静态 HTML，下次命中缓存时直接返回")]),v._v(" "),_("p",[v._v("​\tISR 相比于 SSG + CSR 来说，动态内容可以直接直出，进一步提升了首次访问页面时的体验；相比于 SSR + CSR 来说，减少没必要的静态页面渲染，节省了一部分后端服务器成本。")])])]),v._v(" "),_("blockquote",[_("p",[v._v("​\t优势：")]),v._v(" "),_("p",[v._v("1、结合SSG和SSR的优点：静态内容通过SSG预先渲染，提高加载速度和SEO；动态内容通过SSR在请求时生成，保证内容的新鲜度。")]),v._v(" "),_("p",[v._v("2、智能缓存管理：ISR允许根据内容更新的频率智能地缓存和重新生成页面，减少了不必要的渲染工作。")]),v._v(" "),_("p",[v._v("3、成本效益：相比纯SSR，ISR减少了不必要的渲染操作，从而降低了服务器成本。")])]),v._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t适用于需要频繁更新部分页面内容但又希望保持高性能和SEO的网站，如社交媒体、新闻聚合网站等。")])]),_("h2",{attrs:{id:"同构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同构"}},[v._v("#")]),v._v(" 同构")]),v._v(" "),_("p",[v._v("​\t并不是所有的 WEB 应用都必须使用 SSR，需要权衡利弊，因为服务端渲染会带来以下问题：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("代码复杂度增加。为了实现服务端渲染，应用代码中需要兼容服务端和客户端两种运行情况，而一部分依赖的外部扩展库却只能在客户端运行，需要对其进行特殊处理，才能在服务器渲染应用程序中运行。")])]),v._v(" "),_("li",[_("p",[v._v("需要更多的服务器负载均衡。由于服务器增加了渲染HTML的需求，使得原本只需要输出静态资源文件的 node 服务，新增了数据获取的 IO 和渲染 HTML 的 CPU 占用，如果流量突然暴增，有可能导致服务器down机，因此需要使用响应的缓存策略和准备相应的服务器负载。")])]),v._v(" "),_("li",[_("p",[v._v("涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序 (SPA) 不同，服务器渲染应用程序，需要处于 Node.js server 运行环境。")])])]),v._v(" "),_("p",[v._v("​\t假如我们需要在项目中使用服务端渲染，我们需要做什么呢？那就是同构我们的项目。")]),v._v(" "),_("blockquote",[_("p",[v._v("​\t基于 CSR 和 SSR 各自的优缺点，如果可以将它们进行结合，那么就可以实现互补，而这也就是同构渲染需要做的事，其中的同构就是指应用代码的主体可以同时运行在服务端和客户端。")])]),v._v(" "),_("h3",{attrs:{id:"同构定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同构定义"}},[v._v("#")]),v._v(" 同构定义")]),v._v(" "),_("div",{staticClass:"custom-block danger"},[_("p",{staticClass:"title"}),_("p",[v._v("​\t同构（Isomorphic）或称为通用（Universal）渲染，是Web开发中一种重要的模式，特别是在使用现代JavaScript框架（如React, Vue.js等）时。它允许开发者编写一套代码，这些代码既可以在服务器上执行，用于生成初始的HTML，也可以在客户端执行，以支持后续的交互和页面更新。这种模式的实现需要解决几个关键问题，包括路由、组件、数据模型的共享和兼容性问题。")])]),_("p",[v._v("​\t在服务端渲染中，有两种页面渲染的方式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("前端服务器通过请求后端服务器获取数据并组装HTML返回给浏览器，浏览器直接解析HTML后渲染页面")])]),v._v(" "),_("li",[_("p",[v._v("浏览器在交互过程中，请求新的数据并动态更新渲染页面")])])]),v._v(" "),_("p",[v._v("​\t这两种渲染方式有一个不同点就是，一个是在服务端中组装html的，一个是在客户端中组装html的，运行环境是不一样的。**所谓同构，就是让一份代码，既可以在服务端中执行，也可以在客户端中执行，并且执行的效果都是一样的，都是完成这个html的组装，正确的显示页面。**也就是说，一份代码，既可以客户端渲染，也可以服务端渲染。")]),v._v(" "),_("p",[v._v("​\t同构渲染意味着使用 Node.js 和 JavaScript，因为它们允许重用库，并使浏览 JavaScript 代码能够在 Node.js 环境中运行，而无需进行太多修改。构建同构应用的最终目的是从一份项目源码中构建出 2 份 JavaScript 代码。一份用于在Node.js环境中快速渲染出HTML页面，提高首屏加载速度和SEO性能；另一份用于在浏览器中运行，实现页面的动态交互、数据绑定和路由跳转等功能，提供丰富的用户体验。")]),v._v(" "),_("blockquote",[_("p",[v._v("​\t优势：")]),v._v(" "),_("p",[v._v("1、首屏加载速度快：由于服务器已经预先渲染了HTML，用户首次访问页面时可以立即看到内容，而无需等待JavaScript执行和DOM构建。")]),v._v(" "),_("p",[v._v("2、SEO友好：搜索引擎爬虫可以直接解析由服务器返回的HTML，使得内容更容易被索引。")]),v._v(" "),_("p",[v._v("3、客户端体验流畅：一旦初始页面加载完成，客户端的JavaScript接管页面，提供快速的交互和页面更新。")])]),v._v(" "),_("h3",{attrs:{id:"同构条件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同构条件"}},[v._v("#")]),v._v(" 同构条件")]),v._v(" "),_("p",[v._v("​\t为了实现同构，我们需要满足什么条件呢？首先，我们思考一个应用中一个页面的组成，假如我们使用的是"),_("strong",[v._v("Vue.js")]),v._v("，当我们打开一个页面时，首先是打开这个页面的URL，这个URL，可以通过应用的"),_("strong",[v._v("路由")]),v._v("匹配，找到具体的页面，不同的页面有不同的视图，那么，视图是什么？从应用的角度来看，视图 = "),_("strong",[v._v("模板")]),v._v(" + "),_("strong",[v._v("数据")]),v._v("，那么在 Vue.js 中， 模板可以理解成"),_("strong",[v._v("组件")]),v._v("，数据可以理解为"),_("strong",[v._v("数据模型")]),v._v("，即响应式数据。所以，对于同构应用来说，我们必须实现客户端与服务端的路由、模型组件、数据模型的共享。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(833),alt:"6"}})]),v._v(" "),_("p",[v._v("1、路由共享：")]),v._v(" "),_("ul",[_("li",[v._v("客户端和服务端需要共享路由配置，以便在请求到达时，服务端能够找到对应的组件进行渲染。")]),v._v(" "),_("li",[v._v("通常使用框架提供的路由库（如Vue Router, React Router）配合服务端渲染中间件（如Next.js, Nuxt.js）来实现。")])]),v._v(" "),_("p",[v._v("2、组件共享：")]),v._v(" "),_("ul",[_("li",[v._v("组件需要在客户端和服务端都能正确运行。")]),v._v(" "),_("li",[v._v("需要注意避免在组件中使用仅客户端可用的API（如window对象）。")]),v._v(" "),_("li",[v._v("使用条件渲染或环境变量来区分服务端和客户端的特定代码。")])]),v._v(" "),_("p",[v._v("3、数据模型共享：")]),v._v(" "),_("ul",[_("li",[v._v("数据模型（状态管理）需要在客户端和服务端之间保持同步。")]),v._v(" "),_("li",[v._v("可以通过在服务端预取数据并在客户端初始化状态树来实现。")]),v._v(" "),_("li",[v._v("使用如Redux, Vuex等状态管理库可以更方便地在客户端和服务端之间共享状态。")])]),v._v(" "),_("p",[v._v("4、环境兼容性：")]),v._v(" "),_("ul",[_("li",[v._v("编写兼容服务端和客户端的代码，处理全局对象（如window, document）的缺失。")]),v._v(" "),_("li",[v._v("使用Webpack或类似工具进行代码分割和打包，确保服务端仅包含必要的代码。")])]),v._v(" "),_("p",[v._v("5、构建和部署：")]),v._v(" "),_("ul",[_("li",[v._v("需要配置适当的构建工具和服务器环境，以支持服务端渲染。")]),v._v(" "),_("li",[v._v("确保应用能够在Node.js环境中运行，并正确处理路由和数据请求。")])]),v._v(" "),_("h2",{attrs:{id:"同构流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同构流程"}},[v._v("#")]),v._v(" 同构流程")]),v._v(" "),_("h3",{attrs:{id:"服务端渲染应用快照"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染应用快照"}},[v._v("#")]),v._v(" 服务端渲染应用快照")]),v._v(" "),_("p",[v._v("​\t在服务端，"),_("strong",[v._v("Vue")]),v._v(" 组件会被渲染为静态的 "),_("strong",[v._v("HTML")]),v._v(" 字符串，然后发送给客户端浏览器，服务端生成的 "),_("code",[v._v("HTML")]),v._v(" 内容是在当前数据状态下应用的快照：")]),v._v(" "),_("ul",[_("li",[v._v("生成应用快照的同时，还会生成当前数据状态的 "),_("strong",[v._v("初始数据")]),v._v("，用于提供给客户端做初始化处理")]),v._v(" "),_("li",[v._v("应用快照不具备事件绑定能力，即定义好的事件不会被注册到对应的 "),_("code",[v._v("DOM")]),v._v(" 上")]),v._v(" "),_("li",[v._v("应用快照不具备数据响应式的能力，即不具备和用户进行数据交互的能力，不会执行 "),_("code",[v._v("beforeUpdate、updated")]),v._v(" 生命周期")]),v._v(" "),_("li",[v._v("应用快照不具备节点挂载的能力，即不需要在服务端运行时进行节点挂载操作，不会执行 "),_("code",[v._v("beforeMount、mounted")]),v._v(" 生命周期钩子")]),v._v(" "),_("li",[v._v("应用快照不具备组件销毁的能力，即不会执行组件的 "),_("code",[v._v("beforeUnMount、unMount")]),v._v(" 生命周期钩子")])]),v._v(" "),_("p",[v._v("​\t服务端渲染时不提供上述的功能是因为在服务端渲染根本不需要关注这些，另外也是为了使服务端的渲染压力更小，关注更少的内容。")]),v._v(" "),_("h3",{attrs:{id:"客户端激活"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#客户端激活"}},[v._v("#")]),v._v(" 客户端激活")]),v._v(" "),_("blockquote",[_("p",[v._v("同构应用运行原理的核心在于虚拟 DOM")])]),v._v(" "),_("p",[v._v("​\t在浏览器端，需要渲染这段从服务端返回的 "),_("strong",[v._v("HTML")]),v._v(" 内容，即此时页面中已经存在 "),_("strong",[v._v("组件对应的 DOM 元素")]),v._v("，除此之外该组件还会被打包到一个 "),_("strong",[v._v("JavaScript")]),v._v(" 文件中，并在客户端被 "),_("strong",[v._v("下载、解析、执行")]),v._v("，也就是进入 "),_("strong",[v._v("客户端激活")]),v._v("，后续页面内容的渲染都不需要服务器进行处理动态编译处理。")]),v._v(" "),_("p",[_("strong",[v._v("客户端的 "),_("code",[v._v("JavaScript")]),v._v(" 脚本处理核心内容：")])]),v._v(" "),_("ul",[_("li",[v._v("将当前页面已渲染的 DOM 元素与 Vue.js 所渲染的虚拟 DOM 之间建立联系\n"),_("ul",[_("li",[v._v("由于 "),_("strong",[v._v("真实 "),_("code",[v._v("DOM")])]),v._v(" 和 "),_("strong",[v._v("虚拟 "),_("code",[v._v("DOM")])]),v._v(" 对象都是树形结构，并且节点间存在相互对应关系，"),_("strong",[v._v("激活")]),v._v(" 就可以通过递归地在 "),_("strong",[v._v("真实 "),_("code",[v._v("DOM")])]),v._v(" 和 "),_("strong",[v._v("虚拟 "),_("code",[v._v("DOM")])]),v._v(" 之间建立联系，即 "),_("code",[v._v("vnode.el = el")]),v._v("，并保证是从容器元素的第一个子节点开始，即 "),_("code",[v._v("el.firstChild")])])])]),v._v(" "),_("li",[v._v("为页面中的 "),_("code",[v._v("DOM")]),v._v(" 元素添加事件绑定，使得页面本身支持事件交互")]),v._v(" "),_("li",[_("code",[v._v("Vue.js")]),v._v(" 从 "),_("code",[v._v("HTML")]),v._v(" 页面中提取由服务端序列化后发送过来的数据，用于初始化整个 "),_("code",[v._v("Vue.js")]),v._v(" 的应用程序")])]),v._v(" "),_("h3",{attrs:{id:"如何实现同构渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何实现同构渲染"}},[v._v("#")]),v._v(" 如何实现同构渲染")]),v._v(" "),_("p",[v._v("1、使用Vue、React等框架的官方解决方案。优点是有助于理解原理，缺点是需要搭建环境，比较麻烦")]),v._v(" "),_("blockquote",[_("p",[v._v("① "),_("strong",[v._v("服务端")]),v._v(" 要渲染 "),_("strong",[v._v("Vue 组件")]),v._v(" 意味着需要处理 "),_("code",[v._v("*.vue")]),v._v("、"),_("code",[v._v("*.css")]),v._v("、"),_("code",[v._v("*.ts")]),v._v(" 等依赖模块，而这些是 "),_("strong",[v._v("node")]),v._v(" 本身就不能处理的内容，也不是 "),_("code",[v._v("renderToString")]),v._v(" 能够处理的，因此需要借助 "),_("strong",[v._v("打包构建工具（如 webpack）")]),v._v(" 进行处理。")]),v._v(" "),_("p",[v._v("② "),_("strong",[v._v("客户端")]),v._v(" 实际也需要一个独立的客户端构建版本，虽然最新版本的 "),_("strong",[v._v("Node.js")]),v._v(" 完全支持 "),_("strong",[v._v("ES2015")]),v._v(" 特性，但对于旧的浏览器仍然需要对代码进行转译、兼容处理。")]),v._v(" "),_("p",[v._v("③ 基本思路，使用 "),_("strong",[v._v("webpack")]),v._v(" 同时打包客户端和服务端应用，其中服务端的包会被引入到服务端用来渲染 "),_("strong",[v._v("HTML")]),v._v("，同时客户端的包会被送到浏览器用于 "),_("strong",[v._v("激活静态标记")]),v._v("。")]),v._v(" "),_("p",[v._v("④ 与之对应的两个入口文件就是："),_("strong",[_("code",[v._v("entry-client.js")])]),v._v(" 和 "),_("strong",[_("code",[v._v("entry-server.js")])]),v._v("（更多具体的配置可参见 "),_("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fv3.cn.vuejs.org%2Fguide%2Fssr%2Fhydration.html",target:"_blank",rel:"noopener noreferrer"}},[_("strong",[v._v("官方文档")]),_("OutboundLink")],1),v._v("）")]),v._v(" "),_("p",[_("img",{attrs:{src:t(834),alt:"img"}})])]),v._v(" "),_("p",[v._v("2、使用第三方解决方案，比如：React生态的Next.js和Vue生态的Nuxt.js")]),v._v(" "),_("blockquote",[_("p",[v._v("参考资料：")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6856321751115431944#heading-33",target:"_blank",rel:"noopener noreferrer"}},[v._v("【万字长文警告】从头到尾彻底理解服务端渲染SSR原理 - 掘金 (juejin.cn)"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/x07fhB1LT7L2Pq0yt34iqA",target:"_blank",rel:"noopener noreferrer"}},[v._v("新一代Web技术栈的演进：SSR/SSG/ISR/DPR都在做什么？ (qq.com)"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/7115646231640014885",target:"_blank",rel:"noopener noreferrer"}},[v._v("Vuejs设计与实现 —— 同构渲染 - 掘金 (juejin.cn)"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=a.exports}}]);